What happens when you initialize a repository? 

Git makes a hidden folder so you can get started creating the repository whenever you're ready.

Why do you need to do it?

This is the only way to start a repository. Git doesn't put every file in that folder into the repository because you may not want that.  It waits for you.

How is the staging area different from the working directory and the repository? 

The staging area is an intermediate step where you can get all your ducks in a row before finalizing a commit.

What value do you think it offers?

It allows you to include some files but not others from the working directory in the commit.

How can you use the staging area to make sure you have one commit per logical change?

The staging area lets you commit only one file at a time, so you can add a changed file and label the change for only that file.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Its great if you want development snapshots and then official versions

How do the diagrams help you visualize the branch structure?

It allows you to see which commits are reachable and which are dead-ends

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches results in a new files that has the features of an independently developed feature with no conflicts.  We represent it in the diagram as two branches coming together in order to visualize what's going on.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git will find all the code that is the same and keep it that way.  If it detects a conflict in the same section it doesn't try to rise above its station and fix it since that would lead to bugs.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

For the same reason you do manual commits, you want to be able to easily track your changes and fix things if they break.  If you automatically updated your remote when the GitHub files updated it could lead to problems.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork is when you don't have permission to push to someone else's project, and clone is when you do.  Branch is when you want to make some kind of new feature in parallel and merge the changes later.

What is the benefit of having a copy of the last known state of the remote stored locally?

In case of conflicts you can see the last copy of when the branches were synced up.  Branching doesn't seem to be possible if more than one person are editing the same repository.  The way to branch in GitHub is to fork, so they should fork instead of updating my shit lol.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

You would e-mail files back and forth and it would be hard to keep everything up-to-date and coordinated with all the different versions flying around.  More chances for bugs.

